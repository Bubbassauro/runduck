{"version":3,"sources":["components/Exec.tsx","components/JobRef.tsx","components/Configuration.tsx","components/Script.tsx","components/Command.tsx","components/NotificationEmail.tsx","components/Notification.tsx","functions/getApiUrl.ts","components/Job.tsx","functions/getChipColor.ts","components/Environment.tsx","components/JobList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Exec","Box","Typography","color","Tooltip","title","fontSize","style","marginRight","marginBottom","this","props","command","description","variant","whiteSpace","exec","Component","JobRef","jobRef","jobref","project","group","name","Configuration","type","configuration","Script","script","Command","commandType","my","NotificationEmail","email","subject","recipients","Notification","notificationSuccess","notificationFailure","notification","onsuccess","onfailure","Grid","container","spacing","alignItems","item","xs","Paper","height","padding","getApiUrl","path","console","log","api_url","public_url","Job","state","permalink","commands","updated","updated_dt","Date","toString","refresh","env","data","uuid","url","fetch","then","res","json","setState","getUpdatedStr","catch","loadJobData","pl","p","backgroundColor","theme","palette","background","default","flex","Link","href","target","noWrap","Button","size","startIcon","onClick","map","i","key","JobWithStyles","withTheme","getChipColor","index","green","getContrastText","blue","orange","lime","pink","purple","Environment","Chip","label","EnvironmentWithTheme","getLookupValues","field","unique","Set","values","forEach","element","JobList","tableRef","React","createRef","colRenderCount","environments","maxWidth","options","paging","grouping","filtering","tableLayout","headerStyle","position","top","maxBodyHeight","rowStyle","rowData","text","primary","disabled","columns","width","defaultGroupOrder","cellStyle","paddingLeft","lookup","render","fontWeight","detailPanel","getDetails","onRowClick","event","togglePanel","component","JobListWithTheme","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","ThemeProvider","CssBaseline","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0e6030e7.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Computer from '@material-ui/icons/Computer';\nimport { CommandProps } from './types';\n\nclass Exec extends Component<CommandProps> {\n    render() {\n        return (\n            <Box>\n                <Typography color=\"textSecondary\">\n                    <Tooltip title=\"exec\">\n                        <Computer fontSize=\"small\" style={{ marginRight: \"5px\", marginBottom: \"-5px\" }} />\n                    </Tooltip>\n                    {this.props.command.description}\n                </Typography>\n                <Typography variant=\"body2\" style={{ whiteSpace: 'pre-line' }}>\n                    <code>{this.props.command.exec}</code>\n                </Typography>\n            </Box>\n        )\n    }\n}\nexport default Exec;","import React from 'react';\nimport { Component } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport CollectionsBookmarkIcon from '@material-ui/icons/CollectionsBookmark';\nimport { CommandProps } from './types';\n\nclass JobRef extends Component<CommandProps> {\n    render() {\n        const jobRef = this.props.command.jobref;\n        return(\n            <Box>\n                <Typography color=\"textSecondary\">\n                    <Tooltip title=\"jobref\">\n                        <CollectionsBookmarkIcon fontSize=\"small\" style={{ marginRight: \"5px\", marginBottom: \"-5px\" }} />\n                    </Tooltip>\n                    {jobRef?.project} {jobRef?.group ? `/ ${jobRef.group}` : ''}\n                </Typography>\n                <Typography variant=\"subtitle1\">\n                    {jobRef?.name}\n                </Typography>\n            </Box>\n        )\n    }\n}\nexport default JobRef;","import React from 'react';\nimport { Component } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport AssistantIcon from '@material-ui/icons/Assistant';\nimport { CommandProps } from './types';\n\nclass Configuration extends Component<CommandProps> {\n    render() {\n        return(\n            <Box>\n                <Typography color=\"textSecondary\">\n                    <Tooltip title=\"configuration\">\n                        <AssistantIcon fontSize=\"small\" style={{ marginRight: \"5px\", marginBottom: \"-5px\" }} />\n                    </Tooltip>\n                    {this.props.command?.type}\n                </Typography>\n                <Typography variant=\"body2\" style={{ whiteSpace: 'pre-line' }}>\n                    <code>{this.props.command.configuration?.command}</code>\n                </Typography>\n            </Box>\n        )\n    }\n}\nexport default Configuration;\n","import React from 'react';\nimport { Component } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport { CommandProps } from './types';\n\nclass Script extends Component<CommandProps> {\n    render() {\n        return (\n            <Box>\n                <Typography color=\"textSecondary\">\n                    <Tooltip title=\"script\">\n                        <AssignmentIcon fontSize=\"small\" style={{ marginRight: \"5px\", marginBottom: \"-5px\" }} />\n                    </Tooltip>\n                    {this.props.command.description}\n                </Typography>\n                <Typography variant=\"body2\" style={{ whiteSpace: 'pre-line' }}>\n                    <code>{this.props.command.script}</code>\n                </Typography>\n            </Box>\n        )\n    }\n}\nexport default Script;","import React from 'react';\nimport { Component } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Exec from './Exec';\nimport { CommandProps } from './types';\nimport JobRef from './JobRef';\nimport Configuration from './Configuration';\nimport Script from './Script';\n\nclass Command extends Component<CommandProps> {\n    render() {\n        let commandType;\n        if (this.props.command.jobref) {\n            commandType = <JobRef command={this.props.command} />;\n        }\n        else if(this.props.command.exec) {\n            commandType = <Exec command={this.props.command} />\n        }\n        else if(this.props.command.configuration) {\n            commandType = <Configuration command={this.props.command} />\n        }\n        else {\n            commandType = <Script command={this.props.command} />\n        }\n\n        return (\n            <Box my={2}>{commandType}</Box>\n        )\n    }\n}\nexport default Command;","import React from 'react';\nimport { Component } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { NotificationEmailProps } from './types';\n\nclass NotificationEmail extends Component<NotificationEmailProps> {\n    render() {\n        return (\n            <Box>\n                <Typography variant=\"subtitle1\">{this.props.title}</Typography>\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">{this.props.email.subject} </Typography>\n                <Typography variant=\"body2\">{this.props.email.recipients} </Typography>\n            </Box>\n        )\n    }\n}\nexport default NotificationEmail;","import React from 'react';\nimport { Component } from 'react';\nimport { NotificationType } from './types';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport NotificationEmail from './NotificationEmail';\n\ntype NotificationProps = {\n    notification?: NotificationType,\n}\n\nclass Notification extends Component<NotificationProps> {\n    render() {\n        let notificationSuccess;\n        let notificationFailure;\n\n        if (this.props.notification) {\n            if (this.props.notification.onsuccess) {\n                notificationSuccess = <NotificationEmail\n                    email={this.props.notification.onsuccess.email}\n                    title=\"On Success\" />;\n            }\n            if (this.props.notification.onfailure) {\n                notificationFailure = <NotificationEmail\n                    email={this.props.notification.onfailure.email}\n                    title=\"On Failure\" />;\n            }\n        }\n        return (\n            <Box>\n                { this.props.notification ?\n                <Grid container spacing={2} alignItems=\"stretch\">\n                    { notificationSuccess ?\n                    <Grid item xs>\n                        <Paper style={{height: '100%', padding: '1em'}}>\n                            {notificationSuccess}\n                        </Paper>\n                    </Grid>\n                    : '' }\n                    { notificationFailure ?\n                    <Grid item xs>\n                        <Paper style={{height: '100%', padding: '1em'}}>\n                            {notificationFailure}\n                        </Paper>\n                    </Grid>\n                    : ''}\n                </Grid>\n                : ''}\n            </Box>\n        )\n    }\n}\nexport default Notification;","export function getApiUrl(path:string) {\n    const api_url = '%API_URL%';\n    const public_url = '%PUBLIC_URL%';\n    console.log({api_url, public_url})\n    // Development\n    return `http://localhost:3825/${path}`\n}","import React from 'react';\nimport { Component } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport Refresh from '@material-ui/icons/Refresh';\nimport { withTheme, Theme } from '@material-ui/core/styles';\nimport Command from './Command';\nimport Notification from './Notification';\nimport { Typography } from '@material-ui/core';\nimport { getApiUrl } from '../functions/getApiUrl';\n\ntype JobProps = {\n    data: any,\n    theme: Theme\n}\n\nclass Job extends Component<JobProps> {\n    state = {\n        description: '-',\n        name: '',\n        permalink: '',\n        commands: [],\n        notification: {},\n        updated: ''\n    }\n\n    getUpdatedStr(updated:string) {\n        if (updated) {\n            const updated_dt = new Date(updated);\n            const updated_msg = `Last Updated: ${updated_dt.toString()}`\n            return updated_msg;\n        }\n        return \"\";\n    }\n\n    loadJobData(refresh:boolean=false) {\n        const env = this.props.data[\"env\"]\n        const uuid = this.props.data[\"uuid\"]\n        let path = `api/job/${env}/${uuid}?force_refresh=${refresh}`\n        let url = getApiUrl(path);\n        fetch(url)\n            .then(res => res.json())\n            .then((data) => {\n                this.setState({\n                    name: data[\"name\"],\n                    permalink: data[\"permalink\"],\n                    description: data[\"description\"],\n                    commands: (data[\"sequence\"] ? data[\"sequence\"][\"commands\"] : []),\n                    notification: data[\"notification\"],\n                    updated: this.getUpdatedStr(data[\"updated\"])\n                })\n            })\n            .catch(console.log)\n    }\n\n    componentDidMount() {\n        this.loadJobData();\n    }\n\n    render() {\n        return (\n            <Box pl={6} p={2} style={{backgroundColor: this.props.theme.palette.background.default}}>\n                <Grid container>\n                    <Grid item style={{ flex: 1 }}>\n                        <Link variant=\"h6\" href={this.state.permalink} color=\"textPrimary\"\n                            target=\"_blank\">{this.state.name}</Link>\n                    </Grid>\n                    <Grid item>\n                        <Typography noWrap variant=\"body2\" color=\"textSecondary\">{this.state.updated}\n                            &nbsp;&nbsp;\n                            <Button\n                                variant=\"contained\"\n                                size=\"small\"\n                                startIcon={<Refresh/>}\n                                onClick={() => this.loadJobData(true)}\n                            >\n                            Refresh\n                            </Button>\n                        </Typography>\n                    </Grid>\n                </Grid>\n                {this.state.commands.map((command, i) => {\n                    return (<Box key={i}>\n                        <Command command={command} />\n                        </Box>)\n                    })}\n                <Notification notification={this.state.notification} />\n            </Box>\n        )\n    }\n}\nconst JobWithStyles = withTheme(Job);\nexport default JobWithStyles;","import { Theme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport blue from '@material-ui/core/colors/blue';\nimport purple from '@material-ui/core/colors/purple';\nimport orange from '@material-ui/core/colors/orange';\nimport lime from '@material-ui/core/colors/lime';\nimport pink from '@material-ui/core/colors/pink';\n\nexport function getChipColor(theme: Theme, index: number) {\n    switch (index) {\n        case 0:\n            return {\n                backgroundColor: green[300],\n                color: theme.palette.getContrastText(green[300])\n            }\n        case 1:\n            return {\n                backgroundColor: blue[300],\n                color: theme.palette.getContrastText(blue[300])\n            }\n        case 2:\n            return {\n                backgroundColor: orange[300],\n                color: theme.palette.getContrastText(orange[300])\n            }\n        case 3:\n            return {\n                backgroundColor: lime[300],\n                color: theme.palette.getContrastText(lime[300])\n            }\n        case 4:\n            return {\n                backgroundColor: pink[300],\n                color: theme.palette.getContrastText(pink[300])\n            }\n        case 5:\n            return {\n                backgroundColor: purple[300],\n                color: theme.palette.getContrastText(purple[300])\n            }\n\n\n        default:\n            return {\n                backgroundColor: theme.palette.background.default,\n                color: theme.palette.getContrastText(theme.palette.background.default)\n            }\n    }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport { withTheme, Theme } from '@material-ui/core/styles';\nimport { getChipColor } from '../functions/getChipColor'\n\ntype EnvironmentProps = {\n    theme: Theme,\n    label: string,\n    index: number\n}\n\nclass Environment extends Component<EnvironmentProps> {\n    render() {\n        return (\n        <Chip size=\"small\"\n        label={this.props.label}\n        style={getChipColor(this.props.theme, this.props.index)} />\n        )\n    }\n}\nconst EnvironmentWithTheme = withTheme(Environment);\nexport default EnvironmentWithTheme;","import React from 'react';\nimport { Component } from 'react';\nimport MaterialTable from 'material-table';\nimport Job from './Job';\nimport Environment from './Environment';\nimport { withTheme, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { getApiUrl } from '../functions/getApiUrl';\n\ntype JobListProps = {\n  theme: Theme\n}\n\nfunction getLookupValues(data:any, field:string) {\n  const unique = new Set(data.map((item: any) => item[field] ));\n  var values:any = {}\n  unique.forEach((element:any) => {\n    values[element] = element;\n  });\n  return values;\n}\n\nfunction isEnabled(data:any) {\n  // Returns false if either the schedule or the execution is disabled or both\n  if (data[\"scheduleEnabled\"] && data[\"executionEnabled\"]) {\n    return true;\n  }\n  return false;\n}\n\ndeclare module \"material-table\" {\n  export interface Column<RowData extends object> {\n      width?: string;\n  }\n}\n\nclass JobList extends Component<JobListProps> {\n  componentDidMount() {\n    fetch(getApiUrl('api/jobs'))\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ data: data.data, environments: getLookupValues(data.data, 'env') })\n    })\n    .catch(console.log)\n  }\n\n  tableRef = React.createRef();\n\n  colRenderCount = 0;\n\n  state = {\n    data: [],\n    environments: {},\n  }\n\n  getDetails(data:any) {\n    return(<Job data={data}/>)\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ maxWidth: '100%' }}>\n        <MaterialTable\n        options={ \n          {\n            paging: false,\n            grouping: true,\n            filtering: true,\n            tableLayout: 'fixed',\n            padding: 'dense',\n            headerStyle: { position: 'sticky', top: 0 },\n            maxBodyHeight: 'calc(100vh - 127px)',\n            rowStyle: rowData => ({\n              color: (isEnabled(rowData) ?\n              this.props.theme.palette.text.primary :\n              this.props.theme.palette.text.disabled)\n            })\n          } \n        }\n        columns={[\n          { title: \"Project\", field: \"project_name\", width:'12em', defaultGroupOrder: 0 },\n          { title: \"Group\", field: \"group\", width:'15em', cellStyle: { paddingLeft: '50px'} },\n          { title: \"Environment\", field: 'env', width:'7em', lookup:this.state.environments, \n            render: rowData =>\n            <Environment\n              label={rowData['env']}\n              index={rowData['env_order']}\n            />\n          },\n          { title: \"Job Name\", field: \"name\", width: '30%', cellStyle: { fontWeight: 'bold' } },\n          { title: \"Schedule\", field: \"schedule_description\", width:'15em' },\n          { title: \"Schedule Enabled\", field: \"scheduleEnabled\", type: \"boolean\", width:'6em' },\n          { title: \"Execution Enabled\", field: \"executionEnabled\", type: \"boolean\", width:'6em' },\n          { title: \"Description\", field: \"description\", width: '40%', cellStyle: { whiteSpace: 'pre-line'} },\n        ]}\n        data={this.state.data}\n        detailPanel={rowData => {\n          return this.getDetails(rowData)\n        }}\n        onRowClick={(event, rowData, togglePanel) => { togglePanel && togglePanel() }}\n        title={<Box>\n            <Typography variant=\"h6\" component=\"span\">Runduck</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">&nbsp;&nbsp;&nbsp;&nbsp;Jobs from multiple Rundecks</Typography>\n          </Box>}\n        />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst JobListWithTheme = withTheme(JobList);\nexport default JobListWithTheme;\n","import React from 'react';\nimport JobList from './components/JobList';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n    <CssBaseline/>\n    <div className=\"App\">\n      <JobList />\n    </div>\n    </ThemeProvider>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}